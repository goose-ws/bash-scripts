# Where do you want videos to be saved. Make sure to add this directory to Plex before running the script,
# per the "Installation" instructions in the header of the script.
## This is a string
outputDir=""

# YouTube Data v3 API key
# Technically optional, but if you do not use your own, you'll use the free API service provided via LemnosLife.
# Because that is a freely provided service, calls to it will be throttled, and the script will run much slower.
# To reduce burden on that free service, and greatly improve the speed of API calls, better to use your own API key.
# To generate your own API key:
# 1. Go to https://console.cloud.google.com
# 2. Create a new project
# 3. Select newly created project
# 4. Go to "APIs & Services"
# 5. Go to "Enable APIs and services"
# 6. Search for "youtube data api v3"
# 7. Click on "youtube data api v3"
# 8. Click "Enable"
# 9. Click "Create credentials"
# 10. Click "API Key"
# 11. Copy the API key, paste it into the array below
# Each free project's API key gets 10,000 units per 24 hours. To help ballpark how many API key(s) you may need, consider this:
# For each source, if the source is a channel, it costs 8 units. If the source is a playlist, it costs 3 units. Then, for
# each video in that source, it costs 5 units without subtitles, or 55 units with subtitles.
## This is an array
ytApiKeys=()

# A netscape cookie file authenticating you to YouTube
# Optional, but needed for private videos and playlists
# Also useful to avoid captcha blocking, see https://github.com/yt-dlp/yt-dlp/issues/10128
## This is a string
cookieFile=""

# Set the minimum and maximum range of seconds that we should wait after calling yt-dlp.
# Useful to avoid IP bans, see https://github.com/yt-dlp/yt-dlp/issues/10108
# A minimum of 30 and maximum of 120 seem to have been safe for me, but that's no guarantee.
# Set both to zero to disable.
## These are a strings
throttleMin="30"
throttleMax="120"

# An array of language codes for any desired subtitles.
# For a list of possible subtitles, see here: https://gist.github.com/goose-ws/f7bc2c6f0b006a07ca0aab0b31b74801
# Leaving this blank will disable subtitle support (Saving 50 units of quota per video API lookup)
## This is an array
subLanguages=()

# If you're spawning via cron, we can add an optional sleep when the script is spawned but before we start executing calls, 
# to prevent our actions from appearing too programatic. If you want to do this, set a maximum sleep time (in seconds), and
# a sleep timer will be set for a random number between 1 and your maximum number. Note that this can be longer than your cron
# interval, because the script will not run if the lockfile is present. So let's sa yyou can run the script hourly via cron,
# but set the max sleep for 2 hours. The script spawns at 13:00 and picks a random sleeps for 68 minutes. At 14:00 the script
# spawns, but the lockfile is present, so that spawn exits.
# Leave this blank to disable it.
cronSleep="900"

# Can we check for updates?
## This is a string
updateCheck="No"

# How verbose do you want the output to be
# 1 = Errors only
# 2 = Warnings
# 3 = Informational
# 4 = Verbose
## This is a string
outputVerbosity="3"

# IP address where the Plex Media Server can be reached
# If Plex is in Docker, this can be 'docker:container-name' to automatically find the container's IP address
# For example, plexIp="docker:plex"
# If it's a host based (or remote?) system, you can directly input the IP address
# For example, plexIp="127.0.0.1"
# If the IP address could be dynamic, or you want to obtain it some other way (e.g. your Plex runs in Kube),
# you can set it to a subshell that should return only the bare IP address
# For example, plexIp="$(dig +short 'some.domain.name')" --or-- plexIp="$(kubectl -n media get svc/plex -ojson)"
## This is a string
plexIp="docker:plex"

# Plex Token for authenticating API calls
## This is a string
plexToken=""

# HTTP(S) port Plex is listening on -- Probably 32400
## This is a string
plexPort="32400"

# Scheme Plex is listening with, either 'http' or 'https'
## This is a string
plexScheme="https"

# A staging area with enough space for us to download/work with videos, before moving them to their final destination.
# You'll just want to make sure it's somewhere that has enough space.
## This is a string
tmpDir="/tmp"

## Optional
# If you want to send a Telegram message notifying of renamed items, fill them out.
# Telegram bot API key, obtained from @BotFather
## This is a string
telegramBotId=""

# Telegram channel ID, if you don't know how to get this, use these instructions:
# https://gist.github.com/goose-ws/1c82c98ac4701af433eb5c7562109e51
## This is an array, so you can do multiple channels if you want.
# Format is: ("-100xxxxxxx2" "-100xxxxxxx1")
# Modifiers include threads for super groups, and silent notifications.
# If sending to a super group thread, you can specify the thread by adding '&message_thread_id=[int]',
# where [int] is the interger of the thread ID. (e.g. "-100xxxxxxxxx1&message_thread_id=12")
# For silent notifications, you can add the modifier '&silent=true' (e.g. "-100xxxxxxxxx1&silent=true")
## This is an array
telegramChannelId=()

# Do you want to send a Telegram message for script errors? Beware, the script is not capable of checking
# to see if an error message has already been sent, so depending on your cron settings this could become
# very spammy. Can be "Yes" "No" "True" "False"
## This is a string
telegramErrorMessages=""

# If you enabled Telegram messages for script errors, you can define a different channel for errors to
# be sent to, instead of the ones defined in the 'telegramChannelId' array above. This can only be a single
# channel, not an array. If you leave this blank, and have error messages enabled, then they will send to
# all channels in the 'telegramChannelId' array above.
## This is a string
telegramErrorChannel=""

